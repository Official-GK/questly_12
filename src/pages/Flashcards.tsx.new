import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/use-toast';
import { Bot, Brain, Youtube, Plus, Minus, ArrowRight, Sparkles, TrendingUp, BookOpen } from 'lucide-react';
import { generateFlashcards, generateFlashcardsFromYouTube } from '@/lib/gemini';
import { generatePersonalizedFlashcards } from '@/lib/personalizedLearning';
import { generateTopicRecommendations } from '@/lib/recommendationService';
import type { PersonalizedFlashcard, TopicRecommendation, UserProfile } from '@/types/learning';

// Mock user profile for demonstration
const mockUserProfile: UserProfile = {
  id: '1',
  goals: [
    {
      topic: 'Programming',
      level: 'intermediate',
      description: 'Learn Python programming fundamentals and intermediate concepts'
    }
  ],
  performance: [
    {
      topic: 'Variables',
      score: 90,
      attempts: 3,
      timeSpent: 1200,
      lastAttempt: '2024-01-10T10:00:00Z'
    },
    {
      topic: 'Loops',
      score: 60,
      attempts: 2,
      timeSpent: 1800,
      lastAttempt: '2024-01-09T15:00:00Z'
    },
    {
      topic: 'Functions',
      score: 50,
      attempts: 1,
      timeSpent: 900,
      lastAttempt: '2024-01-08T14:00:00Z'
    }
  ],
  engagementMetrics: {
    totalTimeSpent: 3900,
    preferredLevel: 'beginner',
    completedTopics: ['Variables'],
    skippedTopics: ['Classes']
  }
};

// ... rest of the code remains the same until handleSubmit ...

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (!inputText.trim() && !isPersonalizedMode) {
        toast({
          title: "Error",
          description: "Please enter some text to generate flashcards.",
          variant: "destructive",
        });
        return;
      }

      setLoading(true);
      // Remove setError since we don't have error state
      
      let response;
      if (isPersonalizedMode) {
        response = await generatePersonalizedFlashcards(mockUserProfile, numCards);
      } else if (isYouTubeMode) {
        if (!inputText.includes('youtube.com') && !inputText.includes('youtu.be')) {
          throw new Error('Please enter a valid YouTube URL');
        }
        response = await generateFlashcardsFromYouTube(inputText);
        response = response.slice(0, numCards);
      } else {
        response = await generateFlashcards(inputText);
        response = response.slice(0, numCards);
      }

      setFlashcards(response);
      if (!isPersonalizedMode) {
        setInputText('');
      }
      setCurrentIndex(0);
      setIsFlipped(false);
      
      toast({
        title: "Success!",
        description: "Flashcards generated successfully.",
      });
    } catch (err) {
      console.error('Error generating flashcards:', err);
      toast({
        title: "Error",
        description: err instanceof Error ? err.message : 'Failed to generate flashcards. Please try again.',
        variant: "destructive",
      });
      setFlashcards([]);
    } finally {
      setLoading(false);
    }
  };

// ... rest of the code remains the same ...
